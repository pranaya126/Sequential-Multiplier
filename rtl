module bit_seqmulti (
input clk,
input rst,
input start,
input [3:0] multiplicand,
input [3:0] multiplier,
output reg [7:0] product,
output reg ready
);
reg [3:0] mcand;
reg [3:0] mplier;
reg [7:0] partial_product;
reg [2:0] count;
reg busy;
always @(posedge clk or posedge rst) begin
if (rst) begin
mcand <= 4'b0;
mplier <= 4'b0;
partial_product <= 8'b0;
product <= 8'b0;
count <= 3'b0;
busy <= 1'b0;
ready <= 1'b1;
end else if (start && !busy) begin
mcand <= multiplicand;
mplier <= multiplier;
partial_product <= 8'b0;
count <= 3'b0;
busy <= 1'b1;
ready <= 1'b0;
end else if (busy) begin
if (count < 4) begin
if (mplier[0])
partial_product <= partial_product + (mcand << count);
mplier <= mplier >> 1;
count <= count + 1;
end else begin
product <= partial_product;
busy <= 1'b0;
ready <= 1'b1;
end
end
end
endmodule
